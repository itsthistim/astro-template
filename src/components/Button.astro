---
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"button">, Omit<HTMLAttributes<"a">, "type"> {
	variant?: "primary" | "secondary" | "outline" | "ghost";
	loading?: boolean;
	class?: string;
}

let { variant = "primary", loading, class: className = "", ...rest } = Astro.props;
const Anchor = rest.href ? "a" : "button";

if (rest.disabled) {
	rest["aria-disabled"] = "true";
}

if (loading) {
	rest.disabled = true;
	rest["aria-busy"] = "true";
}
---

<Anchor class:list={["btn", className, variant, { loading }]} {...rest}>
	<span class="btn-content">
		{loading && <Icon class="loading-icon" name="line-md:loading-twotone-loop" />}<slot />
	</span>
</Anchor>

<style>
	.btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		white-space: nowrap;
		padding: 8px 16px;
		border: none;
		border-radius: var(--radius-s);
		text-decoration: none;
		cursor: pointer;
		transition:
			color 0.2s ease,
			background-color 0.2s ease,
			border-color 0.2s ease;
	}

	.btn:disabled {
		cursor: not-allowed;
		opacity: 0.7;
	}

	.loading {
		position: relative;
		cursor: wait !important;
	}

	.loading-icon {
		margin-right: 0.3rem;
	}

	.primary {
		color: light-dark(white, black);
		background-color: light-dark(hsl(0, 0%, 10%), hsl(0, 0%, 90%));
	}
	.primary:hover:not(:disabled) {
		background-color: light-dark(hsl(0, 0%, 18%), hsl(0, 0%, 80%));
	}
	.primary:active:not(:disabled) {
		background-color: light-dark(hsl(0, 0%, 26%), hsl(0, 0%, 70%));
	}

	.secondary,
	.outline:hover:not(:disabled) {
		color: var(--color-text);
		background-color: light-dark(hsl(224, 13%, 85%), hsl(240, 23%, 20%));
	}
	.secondary:hover:not(:disabled),
	.outline:active:not(:disabled) {
		background-color: light-dark(hsl(224, 13%, 77%), hsl(240, 23%, 25%));
	}
	.secondary:active:not(:disabled) {
		background-color: light-dark(hsl(224, 13%, 69%), hsl(240, 23%, 30%));
	}

	.outline {
		color: var(--color-text);
		border: 1px solid light-dark(hsl(0, 0%, 10%), hsl(0, 0%, 90%));
		background-color: transparent;
	}

	.ghost {
		color: var(--color-text);
		background-color: transparent;
	}
	.ghost .btn-content {
		position: relative;
	}
	.ghost .btn-content::after {
		content: "";
		position: absolute;
		width: 100%;
		height: 2px;
		bottom: 0;
		left: 0;
		background-color: var(--color-text);
		transform: scaleX(0);
		transform-origin: bottom center;
		transition: transform 0.25s ease-out;
	}
	.ghost:hover:not(:disabled) .btn-content::after {
		transform: scaleX(1);
		transform-origin: bottom center;
	}
</style>
